{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","click","onClick","bind","className","alt","src","CardList","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","onRobotClick","data","robotname","randomImages","forEach","robot","index","Math","floor","random","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","borderRadius","greedting","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.89214b0d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Card.css';\r\nconst Card=({name,email,id,click})=>{\r\n    return(\r\n       <div onClick={click.bind(this,name)} className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n           <img className=\"img-card\" alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n           </div>\r\n       </div> \r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst CardList=({robots,click})=>{\r\n    return(\r\n    <div>\r\n        {\r\n            robots.map(user=><Card key={user.id} id={user.id}\r\n                name={user.name} \r\n                email={user.email}\r\n                click={click}/>)}\r\n    </div>\r\n    );\r\n}\r\nexport default CardList;\r\n","import React from 'react';\r\nconst SearchBox=({searchChange})=>{\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n            placeholder=\"Search Robots\"\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport '../containers/App.css';\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div className=\"scrollbar\" style={{overflowY:'scroll',border:'5px solid black',height:'650px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooooops. That is not good</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            robots:[],\r\n            searchfield:'',\r\n            robotname:''\r\n   }\r\n}\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=>this.setState({robots:users}));\r\n    }\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value})\r\n}\r\n    onRobotClick=(data)=>{\r\n        this.setState({robotname:data})\r\n}\r\n    randomImages=()=>{\r\n        const {robots}=this.state;\r\n        robots.forEach((robot,index)=>robot.id=Math.floor(Math.random() * ( (index+1)*30 - index*30 ))+index*30)\r\n        this.setState({robots:robots,searchfield:'',robotname:''});\r\n    }\r\n    \r\n    render(){\r\n        const {robots,searchfield,robotname}=this.state;\r\n        const filteredRobots=robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n            <h1 className=\"sega f3\">loading...</h1>:\r\n            (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1 sega\">robofriends</h1>\r\n                    <h3 className=\"f4\">{robotname}</h3>\r\n                    <button className=\"f4 link dim ph3 pv2 mb2 dib white bg-blue\" style={{border:'5px',borderRadius:'25px'}} onClick={this.randomImages}>random</button>{' '}\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll greedting=\"hi\">\r\n                    <ErrorBoundry>\r\n                    <CardList robots={filteredRobots} click={this.onRobotClick}/>\r\n                    </ErrorBoundry>\r\n                   \r\n                   </Scroll>\r\n                </div> \r\n            );\r\n        }     \r\n    }\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nReactDOM.render(<App />\r\n  ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}