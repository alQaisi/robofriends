{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","index.js"],"names":["Boolean","window","location","hostname","match","actionTypes","initialState","searchField","robotname","robotid","initialStateRobots","isPending","robots","error","Card","name","email","id","click","onClick","bind","className","alt","src","CardList","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","OnRequestRobots","randomImages","onRobotClick","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","borderRadius","greedting","connect","robotsReducer","requestRobots","dispatch","event","text","target","value","payload","data","Math","floor","random","fetch","then","response","json","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ef51ad54.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const actionTypes={\r\n    CHANGE_SEARCHFIELD:'CHANGE_SEARCHFIELD',\r\n    ROBOTNAME:'ROBOTNAME',\r\n    ROBOTID:'ROBOTID',\r\n    REQUEST_ROBOTS_PENDING:'REQUEST_ROBOTS_PENDING',\r\n    REQUEST_ROBOTS_SUCCESS:'REQUEST_ROBOTS_SUCCESS',\r\n    REQUEST_ROBOTS_FAILED:'REQUEST_ROBOTS_FAILED'\r\n};","import {actionTypes} from './constants.js';\r\n\r\nconst initialState = {\r\n    searchField: '',\r\n    robotname:'',\r\n    robotid:[1,2,3,4,5,6,7,8,9,10]\r\n}\r\n\r\nconst initialStateRobots={\r\n  isPending:false,\r\n  robots:[],\r\n  error:''\r\n}\r\n\r\nexport const robotsReducer = (state=initialState, action={}) => {\r\n    switch (action.type) {\r\n      case actionTypes.CHANGE_SEARCHFIELD:\r\n        return Object.assign({}, state, {searchField: action.payload,});\r\n      case actionTypes.ROBOTNAME:\r\n        return Object.assign({}, state, {robotname: action.payload});\r\n      case actionTypes.ROBOTID:\r\n        return Object.assign({}, state, {searchField:'',robotname:'',robotid: action.payload});\r\n      default:\r\n        return state;\r\n    }\r\n};\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n  switch(action.type){\r\n    case actionTypes.REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({},state,{isPending:true});\r\n    case actionTypes.REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({},state,{robots:action.payload,isPending:false});\r\n    case actionTypes.REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({},state,{error:action.payload,isPending:false});\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from 'react';\r\nimport './Card.css';\r\nconst Card=({name,email,id,click})=>{\r\n    return(\r\n       <div onClick={click.bind(this,name)} className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n           <img className=\"img-card\" alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n           </div>\r\n       </div> \r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst CardList=({robots,click,robotid})=>{\r\n    return(\r\n    <div>\r\n        {\r\n            robots.map((user,index)=><Card key={user.id} id={robotid[index]}\r\n                name={user.name} \r\n                email={user.email}\r\n                click={click}/>)}\r\n    </div>\r\n    );\r\n}\r\nexport default CardList;\r\n","import React from 'react';\r\nconst SearchBox=({searchChange})=>{\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n            placeholder=\"Search Robots\"\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport '../containers/App.css';\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div className=\"scrollbar\" style={{overflowY:'scroll',border:'5px solid black',height:'650px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooooops. That is not good</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {setSearchField,setRobotName,setRobotID, requestRobots} from '../actions.js'; \r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField:state.robotsReducer.searchField,\r\n        robotname:state.robotsReducer.robotname,\r\n        robotid:state.robotsReducer.robotid,\r\n        robots:state.requestRobots.robots,\r\n        isPending:state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\nconst mapDispatchToProps=dispatch=>{\r\n    return {\r\n        onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n        onRobotClick:(data)=>dispatch(setRobotName(data)),\r\n        randomImages:(data)=>dispatch(setRobotID(data)),\r\n        OnRequestRobots:()=>dispatch(requestRobots())\r\n    }\r\n}\r\nclass App extends Component{\r\n    componentDidMount(){\r\n        this.props.OnRequestRobots();\r\n    }\r\n    render(){\r\n        const {robots,isPending,robotid,robotname,searchField,randomImages,onRobotClick,onSearchChange}=this.props;\r\n        const filteredRobots=robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n            <h1 className=\"sega f3\">loading...</h1>:\r\n            (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1 sega\">robofriends</h1>\r\n                    <h3 className=\"f4\">{robotname}</h3>\r\n                    <button className=\"f4 link dim ph3 pv2 mb2 dib white bg-blue\" style={{border:'5px',borderRadius:'25px'}} onClick={randomImages.bind(this,robotid)}>random</button>{' '}\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll greedting=\"hi\">\r\n                    <ErrorBoundry>\r\n                    <CardList robots={filteredRobots} click={onRobotClick} robotid={robotid}/>\r\n                    </ErrorBoundry>\r\n                   </Scroll>\r\n                </div> \r\n            );\r\n        }     \r\n    }\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import {actionTypes} from './constants.js';\r\n\r\nexport const setSearchField = (text) =>({ \r\n    type: actionTypes.CHANGE_SEARCHFIELD,\r\n    payload: text \r\n});\r\nexport const setRobotName = (name) =>({\r\n    type: actionTypes.ROBOTNAME,\r\n    payload: name \r\n});\r\nexport const setRobotID = (robotid) =>({\r\n    type: actionTypes.ROBOTID,\r\n    payload:robotid.map((robotid,index)=>robotid=Math.floor(Math.random() * ( (index+1)*30 - index*30 ))+index*30)\r\n});\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n    dispatch({type:actionTypes.REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data=>dispatch({type:actionTypes.REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n    .catch(error=>dispatch({type:actionTypes.REQUEST_ROBOTS_FAILED,payload:error}))\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport {robotsReducer,requestRobots} from './reducers.js'\r\nimport App from './containers/App';\r\n\r\nconst logger=createLogger();\r\nconst rootReducer=combineReducers({robotsReducer,requestRobots})\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\r\nReactDOM.render(\r\n                <Provider store={store}>\r\n                  <App />\r\n                </Provider>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}